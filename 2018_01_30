-- 01-26--
select department_id, location_id
from departments;


select first_name, salary, salary+300
from employees;

select last_name || ' 는 ' || job_id
as "직원들 주요사항"
from employees;

select department_name || q'[depar'ssss ma id :]'
|| manager_id
as "asdfasdf"
from departments;


select distinct department_id
from employees;


select last_name, job_id, department_id
from employees
where department_id=90;


select last_name, job_id, department_id
from employees
where last_name = 'Whalen';


select last_name, salary
from employees
where salary<= 3000;

select employee_id, last_name, salary, manager_id
from employees
where manager_id in (100,101,201);



select last_name
from employees
where first_name like 'S%';

select last_name, manager_id
from employees
where manager_id is NULL;


select employee_id, last_name, job_id, salary
from employees
where job_id like '%MAN%';


select last_name, job_id, salary
from employees
where (job_id = 'SA_REP'
OR job_id = 'AD_PRES')
AND salary > 15000;


SELECT last_name, job_id, salary
FROM employees
WHERE job_id = 'SA_REP'
OR job_id = 'AD_PRES'
AND salary > 15000;

select last_name, job_id, department_id, hire_date
from employees
order by hire_date; 

sELECT employee_id, last_name, salary*12 annsal
FROM employees
ORDER BY annsal ;

sELECT employee_id, last_name, salary*12 annsal
FROM employees
ORDER BY 3;



select last_name, employee_id, manager_id
from employees
where department_id = 60;


--역슬레이스 다음은 특수문자 찾아라 escape ' /';


-- 문자열은 ' ' 싱글포테이션을 필수로 넣어야 한다.
select last_name, department_id, salary*12
from employees
where job_id = '&job_title';

--하나씩 결과를 치환해서 풀어간다--
SELECT employee_id, last_name, job_id,&column_name
FROM employees
WHERE &condition
ORDER BY &order_column ;


--엠퍼샌드를 넣음으로써 해당 조건을 넣으면 그거에 따른 order by가 실행되도록 함
SELECT employee_id, last_name, job_id, &&column_name
FROM employees
ORDER BY &column_name;


define employee_num = 200 


--여러개가 뭉치면 한번에 하지말고  스크립트 실행으로 
DEFINE employee_num = 200;
SELECT employee_id, last_name, salary, department_id
FROM employees
WHERE employee_id = &employee_num ;
UNDEFINE employee_num



SET VERIFY ON
SELECT employee_id, last_name, salary
FROM employees
WHERE employee_id = &employee_num;




-- 연습문제 2-1  1번 --
select last_name, salary
from employees
where salary >12000;

select last_name, department_id
from employees
where employee_id=176;


select last_name, salary
from employees
where salary 
         not between 5000 and 12000;


--4 
select last_name, job_id, hire_date
from employees
where last_name like 'Matos' or last_name like 'Taylor'
order by hire_date;


select last_name, department_id
from employees
where department_id=20 or department_id=50
order by department_id desc;


select last_name as "Employee", salary as "Monthly Salary"
from employees
where salary 
         between 5000 and 12000
         and (department_id =20 or department_id=50);

--7- 년 말고 나머지 설정 하는 방법-

select last_name, hire_date
from employees
where hire_date='94%';

--8 
select last_name, job_id
from employees
where manager_id is null;



--9 
select last_name, salary, commission_pct
from employees
where commission_pct 
is not null;


--10

select last_name, salary
from employees
where salary = '&salary';


--11




-- 일단 3장 --
--이렇게 하면 다 더해서 하나의 결과로 반환하는 형태
select sum(salary) 
from employees;

select sysdate 
from employees;

--위와같이 복수형 함수와 단일형 함수로 나뉜다--
--소문자로 출력 lower
select lower (last_name)
from employees;
--대문자는 upper
--바로 괄호를 통해 출력, 하나는 dual 을 활용 
select lower ('hello WORLD')
from dual;

-- 첫번째 스펠링만 대문자로 활용해줌
select initcap (last_name)
from employees;


--검색을 한다고 가정했을 때, 원하는 답이나오려면
--데이터 값이 initcap으로 되어있으니 활용
select last_name, salary, department_id
from employees
where last_name=initcap('king');


select employee_id, last_name, department_id
from emplOyees
where LOWER(last_name)='higgins';

--특정 글자를 * 부터, * 숫자까지 6번째 글짜부터 2칸까지
select substr('hello world',6,2) from dual;

--w를 찾아라 몇번째 인지
select instr('hello world','w') from dual;

--LPAD는 제시한 '@' 패턴으로 좌측부터 채운다.
select lpad(salary,10,'@') from employees;
--RPAD는 우측부터 채운다.
DFDF
--대체하기
select replace('jack and jue', 'j', 'BL');
--글자 자르기  TRIM

---round는 반올림이다. ( & , 뒤에 숫자는 몇자리에서 반올림 할 것인지 설정) 
select round(3.14) from dual;
select round(3.66, 1) from dual;
select round(3.119, 2) from dual;
select round(31.14, -1) from dual;
-- 숫자가 -로 들어가면 앞으로 움직여서 반올림 수행하게 된다.

--trunc 는 뒤에 원하는 숫자까지 잘라서 버리는것
--mod 나누기
select mod(1600, 300) from dual;


--sysdate 현 날짜를 서술해주는 것
select sysdate from dual;

select to_char(sysdate, 'yyyy/mm/dd') from dual;
--12시간 기준
select to_char(sysdate, 'yyyy/mm/dd HH:MI:SS') from dual;
--24시간 기준
select to_char(sysdate, 'yyyy/mm/dd HH24:MI:SS') from dual;
DFDFDF
--다음날--
select sysdate+1 from dual;

--24시간에서 1시간을 더하는 것이니 현재 시간에서 +1 시간만큼을 알 수 있다
select to_char(sysdate+1/24, 'yyyy/mm/dd HH24:MI:SS') from dual;
select to_char(sysdate+2/24, 'yyyy/mm/dd HH24:MI:SS') from dual;

--내일의 1시간 뒤를 알 수 있다. 이런 방식을 활용하여 시간을 볼 수 있다.
select to_char(sysdate+1/24 +1, 'yyyy/mm/dd HH24:MI:SS') from dual;

--4시간 25분 후를 확인 하는 방법, 분단위까지 나누기를 활용해서 시간을 나타낼 수 있다.
select to_char(sysdate+4/24 + 25/24/60, 'yyyy/mm/dd HH24:MI:SS') from dual;


-- 입사한 뒤로 현재까지 얼마나 근속했는지 주 단위로 확인 할 수 있다. 
select last_name, (sysdate-hire_date)/7 as weeks
from employees
where department_id = 90;


-- 현재 시간부터 xx년 xx월 xx일 뺀 경우, 본인이 오늘까지 몇일을 살았는지 알 수 있다.
select sysdate - to_date('2017/03/25')
from dual;

--돌아오는 동일 요일이 언제인지
select next_day (sysdate, '금요일') from dual;

--입력값의 마지막 날이 언제인지 확인이 가능하다 SYSDATE+10 을 넣어도 계산한 달의 마지막날이 나옴
select last_day ('2018-02-01') from dual;

--2001년 1월 1일 부터 지금 현 시간까지 의 월 차이  *to_date(' ' ) 는 날짜로 변환해주는 것 
select months_between (sysdate,'2001/01/01') from dual; 



---4장--- 명시적변환 데이터는 강제적으로 형 변환을 해야하는 데이터 이다.
--char(*) 로 하면 나머지 공간이 낭비되고 varchar2(*)로 사용할 경우 좀더 효과적으로 사용할 수 있다.
--문서를 날짜로는 TO_DATE 고 날짜를 문자로 하면 TO_CHAR 가 들어가 줘야 한다.


SELECT last_name, to_char(hire_date, 'fmdd month yyyy')
as hiredate 
from employees;


SELECT last_name,
TO_CHAR(hire_date, 'YYYY MoNth DD')
AS HIREDATE
FROM employees;


SELECT last_name,
TO_CHAR(hire_date, 'YYYY/MM/DD')
AS HIREDATE
FROM employees;


--숫자를 문자로 바꾸는 경우
select to_char(salary, '$99,999,00') salary
from employees
where last_name ='Ernst';


SELECT TO_CHAR(salary, '$99,999.00') SALARY
FROM employees
WHERE last_name = 'Ernst';

--날짜를 yyyy/mm/dd 로 변환하는것이 훨씬 가독성이 좋다.
select last_name, to_char(hire_date, 'yyyy/mm/dd')
from employees
where hire_date > to_date('90/01/01', 'yyyy/mm/dd');


--괄호 중첩은 안쪽에서 바깥으로 실행된다.
select last_name,
UPPER(CONCAT(SUBSTR (LAST_NAME, 1, 8), '_US'))
from employees
where department_id = 60;

SELECT last_name,
UPPER(CONCAT(SUBSTR (LAST_NAME, 1, 8), '_US'))
FROM employees
WHERE department_id = 60;

SELECT last_name, salary, NVL(commission_pct, 0),
(salary*12) + (salary*12*NVL(commission_pct, 0)) AN_SAL
FROM employees;

--nvl2 는 null 값을 이용하여 null 값이 아니면 첫번째 null 이면 두번째 값이 출력하게 만든다. 
--null 인지 아닌 지에 따라 결과값이 다름  
SELECT last_name, salary, commission_pct,
NVL2(commission_pct,
'SAL+COMM', 'SAL') income
FROM employees WHERE department_id IN (50, 80);

SELECT last_name, salary, commission_pct,
NVL2(commission_pct,
SALary+COMMission_pct, salary) income
FROM employees WHERE department_id IN (50, 80);

--nullif 함수를 활용 , 첫번째와 두번째의 값이 같을 경우 null로 표기, 다를 경우 우선순위로 표기 해줌
select first_name, length(first_name) "expr1", 
         last_name, length(last_name) "expr2",
         nullif(length(last_name), length(first_name)) result
         from employees;

--coalesce   null 이 아닐때까지 출력하는것 
SELECT last_name, employee_id,
COALESCE(TO_CHAR(commission_pct),TO_CHAR(manager_id),
'No commission and no manager')
FROM employees;


---조건부 표현식인 case 식과 decode 함수  ** 매우 중요 **
--decode 

SELECT last_name, job_id, salary,
           DECODE(job_id, 'IT_PROG', 1.10*salary,   -- 3가지 직군별 월급을 10,15,20%를 올린다는 식 디코드
                                'ST_CLERK', 1.15*salary,
                                'SA_REP', 1.20*salary, 
salary) -- 나머지 사람들은 월급 동결 
AS REVISED_SALARY
FROM employees;

--mod
-- 사내 체육대회를 시행하려고하는데 짝수 청군, 홀수 백군으로 설정하려고 한다.
SELECT employee_id, last_name,
   decode(mod(employee_id,2) ,0, '청',  --mod를 활용하여 2로 나누어 짝 홀을 결정짓는다.
                                          1, '백') as 팀
from employees;


--decode가 아닌 searched case로 변경한 경우
SELECT employee_id, last_name,
   case mod(employee_id,2) when 0 then '청'  --case mod를 활용하여 2로 나누어 짝 홀을 결정짓는다.
                                      when 1 then '백' 
                                      end as "팀"
from employees;


-----------------------
-- conn scott/tiger--
-----------------------

--급여 1~1000 : low / 1001 ~ 2000  : mid / 2001 ~ @ : high
--decode는 반드시 하나의 값이 나와야한다, ㅁㅁ는 ㅁㅁ다 로 나와야지 범위로 지정해줄 수 없다.
--- 그래서 공통점이 1000으로 나누어주고 0,1,나머지로 등급을 구분하는 방법을 사용함.
select ename, sal, 
        decode( trunc(sal/1000) , 0, 'low',
                                          1, 'mid',
                                          'high') as "등급"                                       
from emp;
--하지만 급여가 1000으로 구분지어지는 인물은 low 인가 mid 인가/ 경계값의 문제점 
--다른방법으로 경계값을 해결 (salary-1)/1000 외에--
select ename, sal, 
        decode( ceil(sal/1000) ,1, 'low',  --ceil 을 통해 올림을 한다. 이럴경우 0 이 없으므로 1 부터 시작
                                        2, 'mid', --1을 고정하고 나머지를 올리는 방법 
                                          'high') as "등급"                                       
from emp;

--searched case 방식으로 
select ename, sal, case ceil(sal/1000) when 1 then 'low'
                                          when 2 then 'mid'
                                        else 'high' end as "등급"
from emp;

--simpled case 방식으로  simpled case가 가독성이 높고 좋은데 구버전에서는 미가동일 수 있음.
select ename, sal, case when sal<=1000 then 'low'
                                          when sal<=2000 then 'mid'
                                        else 'high' end as "등급"
from emp;





-- 자료 업데이트 명령--
update emp set sal=800 where ename='SMITH';

------------------
----N1/N1------
------------------
---1~10000 : LOW , 10001~20000 : MID, 20001~@ : HIGH--

--- 경계값을 해결하기 위해 salary -1 을 통해 --
select employee_id, last_name, salary,
decode(trunc((salary-1) / 10000), 0, 'low',
                                      1, 'mid',
                                    'high') as "등급"
                        from employees;

--다른 방법 --
select employee_id, last_name, salary,
decode(ceil(salary / 10000), 1,  'low',
                                      2, 'mid',
                                       'high') as "등급"
                        from employees;

--searched case 방식
--searched case 의 경우 " , " 를 지우고 decode가 아닌 case를 넣어 풀이형 문장으로 만듬
select employee_id, last_name, salary,
case ceil(salary / 10000) when 1 then  'low'
                                 when 2 then 'mid'
                                        else 'high' end as "등급"
from employees;
                        

--simplied case 방식                        
---기본조건만을 준뒤 case 가 when 언제 얼마이하 salary <= 10000 등 직접 값을 넣어 만듬                         
select employee_id, last_name, salary,
case  when salary<=10000 then 'low'
                                 when salary<=20000 then 'mid'
                                        else 'high' end as "등급"
from employees;                        
                     
                        
---- 5장 그룹함수--- 

 -- avg 및 sum 함수 사용 --
 
                        
                        
SELECT AVG(salary), MAX(salary),
MIN(salary), SUM(salary)
FROM employees
WHERE job_id LIKE '%REP%';
                        
                        
-- 가장 최근에 입사한 사람과 오래된 사람 구분--                  
SELECT MIN(hire_date), MAX(hire_date)
FROM employees;         


--부서명 50 인 곳의 사원수는 5명이다---
select count(*)
from employees
where department_id = 50;


--부서는 8가지 있는데 7이라고 나온 이유는 하나의 부서가 중복되거나 사원이 없는 경우이다.--
select count(distinct department_id)
from employees;

--평균을 구할 때, NULL 값은 포함되지 않는다. 포함될경우 NULL이 되 버리기 때문--
select avg(commission_pct)
from employees;   --commission 받는 사람들만 평균을 구한것임 avg 에서는 자동 


-- 전체 사원대비 commission을 나눠서 계산함.  
SELECT AVG(nvl(commission_pct, 0))  ---- null 값이 있을 경우 0으로 치환하여 계산한다.
from employees;  --- 결국 전사원대비 commission이 계산 됨.

--가짜 열  슈도컬럼  가짜 컬럼,  무슨말인지 모르겠다.
--기록을 지정안해도 카운팅 되는 이유는 rowid 가 있어서 임의의 저장 포인트가 생성되기 때문이다.
select rowid,rownum,last_name from employees;  


-- sum과 같이 집계함수를 하나라도 사용할 경우 집계함수(group by)로 넣어줘야 한다
select department_id, sum(salary) 
from employees
group by department_id;
-- 해석을 하자면 그룹 번호별로 grouping 된 뒤 각각의 합계를 따로 구하겠다는 해석.
--부서별 합계가 된다.

-- 급여의 합계를 구하려고 하는데 나머지 칼럼 group by로 넣어서 부서별, 업무별 급여 합계가 나온다
-- 동일 부서여도 다른 업무를 하는 사람들이 있는데 동일부서 다른 업무까지 세부적 급여합계 확인.
SELECT department_id, job_id, SUM(salary)
FROM employees
WHERE department_id > 40
GROUP BY department_id, job_id
ORDER BY department_id;
-- 부서별 번호 오름차순으로 정리함  그룹번호 40번 초과하는 것에 한에서 

--부서별 부서평균 급여를 알고싶었다. group by 까지 잘 넣었으나, where 절 문제
SELECT department_id, AVG(salary)
FROM employees
WHERE AVG(salary) > 8000
GROUP BY department_id;
--집계에 대한 조건을 having 이라는 절로 넣어야 한다.

-- 옳은 쿼리  having 절 외에 넣으면 에러가 뜬다.
SELECT department_id, AVG(salary)
FROM employees
GROUP BY department_id
having AVG(salary) > 8000;

--집계함수에 대한 조건은 반드시 HAVING 에 넣어라 
SELECT department_id, MAX(salary)
FROM employees
GROUP BY department_id
HAVING MAX(salary)>10000 ;

--job id 가 group by로 들어가 있으므로 업무별 급여에 대해 나온다. 조건부로 having 13000 급여 이상

SELECT job_id as "직업" , SUM(salary) AS " 급여합 "
FROM employees
WHERE job_id NOT LIKE '%REP%'
GROUP BY job_id
HAVING SUM(salary) > 13000
ORDER BY SUM(salary);

-- 순서가 반드시 정해져있다
--- 기술순서 : SELECT -> FROM -> WHERE -> GROUP BY -> HAVING -> ORDER BY
--- 처리순서 : FROM 에서 가져오고 -> WHERE 세부적으로 찾고 -> GROUP BY로 집합시키고 -> SELECT 로 선택하고 -> HAVING 의 조건 -> 순서정함 ORDER BY

SELECT job_id as "직업" , SUM(salary) AS " 급여합 "
FROM employees
GROUP BY job_id
HAVING SUM(salary) > 13000 AND job_id NOT LIKE '%REP%'
ORDER BY SUM(salary);
-- WHERE 에 HAVING 의 집계조건을 넣을 순 없지만 반대로 WHERE의 조건을 HAVING 에 넣으면 성립된다.
--- 하지만 WHERE 에 적는게 좋은 이유는 성능때문 ( HAVING -> WHERE (X) , WHERE -> HAVING (O))

SELECT MAX(AVG(salary)) AS "가장 큰값"
FROM employees
GROUP BY department_id;

--집계함수를 썼다면 조건들은 GROUP BY에 들어가야 하며 GROUP BY의 조건절은 HAVING 으로 들어간다.

--5장 연습문제--
--1 ㅇ 2 X 3 ㅇ 
--4

select max(salary) as "Maximum", min(salary) as "Minimum", sum(salary) as "Sum", avg(salary) as average
from employees;

--5

select job_id, max(salary) as "Maximum", min(salary) as "Minimum", sum(salary) as "Sum", avg(salary) as average
from employees
group by job_id;


--6 
select job_id, count(*)
from employees
group by job_id;

select count(*)
from employees
where job_id like 'IT_%';

--7

select count(unique manager_id) 
from employees;

--8
select max(salary)-min(salary)
from employees;

--9 **다시풀어볼것 
select manager_id, min(salary) 
from employees
where 
group by
having
order by

--10
select count(hire_date )
from emplyees;



---SQL 활용 수행평가
--1
select last_name, salary, job_id
from employees
where job_id like '%MAN%' and salary > 10000;

--2
select last_name, salary, job_id
from employees
where job_id like  '%MAN%' or salary > 10000;

--3
select last_name, salary, job_id
from employees
WHERE job_id not IN ('IT_PROG' , 'ST_CLERK', 'SA_REP');

--4 
SELECT last_name, commission_pct
from employees
where commission_pct is not null;


--5 
select last_name, salary, job_id
from employees
where job_id in('ST_CLERK', 'SA_REP') and 
         salary not in('2500', '3500', '7000');
         
         
--6
select department_id, max(salary)-min(salary)
from employees
group by department_id
order by department_id;

--7
select department_id, count(last_name)
from employees
group by department_id
order by department_id;


--8
select avg(nvl(commission_pct, 0))
from employees;


--9
select department_id, count(last_name)
from employees
where salary>5000
group by department_id
order by department_id;


--10

select department_id, job_id, sum(salary)
from employees
group by department_id, job_id
order by department_id;

--11

SELECT job_id, sum(salary)
from employees
where job_id not like '%REP%' 
group by job_id
having sum(salary) > 13000
order by sum(salary);


--18_01_30--
--6 조인--
--릴레이션 하나로 원하는 데이터를 얻을 수 없는 경우 여러 릴레이션을 연결하여 원하는 값을 도출하는 것.

--4select
--1from
--2where
--3group by
--5having
--6order by--

--책에 있는 부분은 ANSI join 만 있고 , Oracle JOIN 도 알아야 한다. 
--ORACLE JOIN : 1. Equi JOIN / 2. Outer JOIN / 3. Non Equi JOIN / 4. SELF JOIN

--Scott (conn scott/tiger)--

-------ORACLE JOIN-------
--1. Equi JOIN(=Inner JOIN)

--cross join or (cartesian product) 중복되어 모든 경우의 수가 나온 상황. 어떤식으로 조인 시킬지 필요
select ename, dname
from emp, dept
order by ename;

--equi join   join 조건에  "=" 사인이 들어가는 조인문 직원의 부서넘버와 = 부서의 넘버가 맞을 때
select e.ename, d.dname
from emp e, dept d   --조인을 하기전에는 별칭을 붙혀두는게 좋다 emp e /  dept d 
where e.deptno =d.deptno
order by ename;

-----------------------
-----Conn n1/n1----
-----------------------
--사원 테이블과 부서테이블을 조인해서 사우너이름과 부서명을 출력
--employees.last_name ,  부서명은 departments.department_name

select last_name, department_name
from employees , departments
where  employees.department_id = departments. department_id;

--별칭을 붙혀서 사용할 경우, 양쪽 키값이 존재할 경우도 있기에 어디의 키값인지 구분필요 
select last_name, department_name
from employees e, departments d  --별칭붙히는 경우는 띄어쓰기 하고 스펠링
where  employees.department_id = departments. department_id;  --이렇게 길어지는 경우가 있다.


select e.last_name, d.department_name
from employees e, departments d
where  e.department_id = d. department_id;
-- null (부서가 없는 직원이 한명있기에 20명 인원이지만 19 출력--

----------------------
--conn scott/tiger--
----------------------

--2. Outer JOIN

select e.ename, d.dname
from emp e, dept d    
where e.deptno =d.deptno
order by ename;

update emp set deptno=null where ename='JONES';
commit;


-- joens 의 부서번호가 null 값이 되어 행이 12에서 11--
select e.ename, d.dname
from emp e, dept d    
where e.deptno =d.deptno(+) -- null 값이 있는 부서쪽에 + 를 준다 ( 즉 사원쪽이 12 det.no 가 11개니 dep.no에 + 부호를 넣어줌)
order by ename;

--join 은 순서가 중요하여 from 과 where 의 순서를 동일하게 하는게 좋다--
--outer join은 left outer join(=left JOIN) 으로 부르기도 한다--

---부서에서 근무하는 사원들을 도출하는 경우 ( 40번 부서가 현재 사원이 없어도 출력해야하는 경우)
select e.ename, d.dname
from emp e, dept d    
where e.deptno(+) =d.deptno
order by ename;
-- 사원이 없는 OPERATIONS 가 출력이 되고 ENAME 이 NULL값으로 도출--

--양쪽 (+) 넣는건 ORACLE JOIN 에서 지원하지 않는다--
select e.ename, d.dname
from emp e, dept d    
where e.deptno(+) =d.deptno(+)
order by ename;
--Full (outer) JOIN 지원하지 않음 x--

------------------
--conn n1/n1---
------------------

--2. outer join
---(1) 부서가 없는 사원도 출력 (left join)
----(2) 사원이 없는 부서도 출력 (right join)

--(1) 부서가 없는 사원  (없는쪽에 null 있는쪽에 +)
select e.last_name, d.department_name
from employees e, departments d
where e.department_id = d. department_id(+);

--(2) 사원이 없는 부서
select e.last_name, d.department_name
from employees e, departments d
where e.department_id(+) = d. department_id;   --부서(department)에 사원이 없는 상황 NULL을 나타내기 위해 사원(employees 측에 +를 붙힌다)

--(3) full outer join 은 oracle join에서 지원하지 않는다.


--conn scott/tiger--
--3.non equi join
---월급에 따른 등급 차
select e.ename, e.sal, s.grade
from emp e, salgrade s 
--where s.losal <= e.sal and e.sal <= s.hisal;
where e.sal between s.losal and s.hisal;

--conn n1/n1--
-- employees(사원) 테이블과 job_grades(업무등급)테이블을 조인해서
--employees.last_name(사원명)과
--employees.salary(급여),
--job_grades.grade_level(등급)을 출력

select e.last_name AS "사원명", e.salary AS "급여", j.grade_level AS "급여등급"
from employees e, JOB_GRADES j
where e.salary between j.lowest_sal and highest_sal;

--conn scott/tiger--
--4. Self JOIN--
--만약 부서내에서 직속상사를 확인한다면? EMP 테이블에서 EMP 내의 MEG.N 로 연결되는 경우
---그동안 별칭을 붙히는것은 옵션이였으나, SELF JOIN 에서는 필수로 들어간다 (EMP 내에서 구분이 안가서)
select e.ename AS "멘티", m.ename as "멘토"
from emp e, emp m -- emp employees 에서 emp manager.n 를 구분짓는 경우
where e.MGR = m.empno(+);  -- 사원측의 매니저번호와 , 매니저측의 사원번호를 출력한다, 없는 쪽에 +를 넣어주는 것
-- king 은 매니저 사원번호가 없으니 m.empno에 +를 넣어주는 상황. 이를 통해서 사원의 매니저 번호와 동일한 매니저의 사원이 나타나게 된다.
--- 자기 테이블과 자기테이블을 연결짓는 이런경우 


--conn n1/n1
--4. self JOIN 자기 자신테이블을 연결--
-- employees(사원)테이블을 이용해서 사원(mentee), 사수(mento)를 출력해라.
-- last_name , manager_id
select e.last_name as "사원", m.last_name as "사수"
from employees e , employees m                    -- e  , m 순서로 만들면
where e.manager_id = m.employee_id(+);          -- e , m 순서로 만들어라

-----------------------------------
--ORACLE JOIN -> ANSI JOIN--
----------ANSI JOIN--------------
--1. Equi JOIN(=Inner JOIN)--

--ANSI JOIN 은  " , " 대신 JOIN 을 넣고 "WHERE" 대신 ON 을 넣으면 된다.
--- 최근 단순 JOIN 말고 INNER JOIN 을 넣는걸 권장 ( 결과는 동일 하다.)

select e.ename, d.dname
from emp e join dept d   --조인을 하기전에는 별칭을 붙혀두는게 좋다 emp e /  dept d 
ON e.deptno =d.deptno
order by ename;

-----------------------
-----Conn n1/n1----
-----------------------
--사원 테이블과 부서테이블을 조인해서 사우너이름과 부서명을 출력
--employees.last_name ,  부서명은 departments.department_name

select last_name, department_name
from employees JOIN departments
ON employees.department_id = departments. department_id;

--별칭을 붙혀서 사용할 경우, 양쪽 키값이 존재할 경우도 있기에 어디의 키값인지 구분필요 

select e.last_name, d.department_name
from employees e JOIN departments d
ON  e.department_id = d. department_id;
-- null (부서가 없는 직원이 한명있기에 20명 인원이지만 19 출력--

----------------------
--conn scott/tiger--
----------------------

--2. Outer JOIN--
---------------------
--ANSI JOIN 에서 OUTER JOIN 을 할 때, (+)를 지우고,  FROM 에서 LEFT, RIGHT JOIN을 넣는다.--

select e.ename, d.dname
from emp e JOIN dept d    
ON e.deptno =d.deptno
order by ename;

update emp set deptno=null where ename='JONES';
commit;

-- joens 의 부서번호가 null 값이 되어 행이 12에서 11--
--left join-- // NULL 값이 없는 부분에 방향을 준다 //
select e.ename, d.dname
from emp e LEFT JOIN dept d    
ON e.deptno =d.deptno
order by ename;

--join 은 순서가 중요하여 from 과 where 의 순서를 동일하게 하는게 좋다--
--outer join은 left outer join(=left JOIN) 으로 부르기도 한다--

---부서에서 근무하는 사원들을 도출하는 경우 ( 40번 부서가 현재 사원이 없어도 출력해야하는 경우)
select e.ename, d.dname
from emp e RIGHT JOIN dept d    
ON e.deptno =d.deptno
order by ename;
-- 사원이 없는 OPERATIONS 가 출력이 되고 ENAME 이 NULL값으로 도출--

--양쪽 (+) 넣는건 "FULL OUTER JOIN" ORACLE JOIN 에서 지원하지 않는다--
---ANSI JOIN의 경우 +를 지우고 FULL JOIN 을 넣는다.---
select e.ename, d.dname
from emp e FULL JOIN dept d    
ON e.deptno=d.deptno
order by ename;

------------------
--conn n1/n1---
------------------

--2. outer join < ANSI JOIN / " , " 를 JOIN 으로  "WHERE"를 ON 으로.
---(1) 부서가 없는 사원도 출력 (left join)
----(2) 사원이 없는 부서도 출력 (right join)

--(1) 부서가 없는 사원  (없는쪽에 null 있는쪽에 +)
select e.last_name, d.department_name
from employees e LEFT JOIN departments d
ON e.department_id = d. department_id;

--(2) 사원이 없는 부서
select e.last_name, d.department_name
from employees e RIGHT JOIN departments d
ON e.department_id = d. department_id;   --부서(department)에 사원이 없는 상황 NULL을 나타내기 위해 사원(employees 측에 +를 붙힌다)

--(3) full outer join 은 ORACLE JOIN 에서 지원하지 않는다.
---ANSI JOIN 에서는 지원하며 FULL JOIN 을 넣어 준다.

select e.last_name, d.department_name
from employees e FULL JOIN departments d
ON e.department_id = d. department_id;

--conn scott/tiger--
-----ANSI JOIN-----
--3.non equi join--
---월급에 따른 등급 차

select e.ename, e.sal, s.grade
from emp e JOIN salgrade s 
--where s.losal <= e.sal and e.sal <= s.hisal;
ON e.sal between s.losal and s.hisal;

--conn n1/n1--
-- employees(사원) 테이블과 job_grades(업무등급)테이블을 조인해서
---employees.last_name(사원명)과
----employees.salary(급여),
-----job_grades.grade_level(등급)을 출력

select e.last_name AS "사원명", e.salary AS "급여", j.grade_level AS "급여등급"
from employees e JOIN JOB_GRADES j
ON e.salary between j.lowest_sal and highest_sal;

--conn scott/tiger--
--ANSI JOIN // 4. Self JOIN--
--만약 부서내에서 직속상사를 확인한다면? EMP 테이블에서 EMP 내의 MEG.N 로 연결되는 경우
---그동안 별칭을 붙히는것은 옵션이였으나, SELF JOIN 에서는 필수로 들어간다 (EMP 내에서 구분이 안가서)

select e.ename AS "멘티", m.ename as "멘토"
from emp e LEFT JOIN emp m -- emp employees 에서 emp manager.n 를 구분짓는 경우
ON e.MGR = m.empno;  -- 사원측의 매니저번호와 , 매니저측의 사원번호를 출력한다, 없는 쪽에 +를 넣어주는 것
-- king 은 매니저 사원번호가 없으니 m.empno에 +를 넣어주는 상황. 이를 통해서 사원의 매니저 번호와 동일한 매니저의 사원이 나타나게 된다.
--- 자기 테이블과 자기테이블을 연결짓는 이런경우 


--conn n1/n1
--4. self JOIN 자기 자신테이블을 연결--
-- employees(사원)테이블을 이용해서 사원(mentee), 사수(mento)를 출력해라.
-- last_name , manager_id
select e.last_name as "사원", m.last_name as "사수"
from employees e LEFT JOIN employees m    -- e , m 순서로 만들면
ON e.manager_id = m.employee_id;           -- e , m 순서로 만들어라

---정리---
--ANSI JOIN 은  " , " 대신 " JOIN ( 혹은 LEFT , RIGHT , FRULL JOIN)" 을 사용하며 [NULL값이 없는 방향]
--- " WHERE " 대신 ON 을 사용한다.

--"Natural JOIN" (X) 사용 하지말고 있다는 것만 알 것.
--- "JOIN ~ USING" ( JOIN 에서 사용할 열이 들어감)
Select ename, dname
from emp left join dept
using (deptno);

----JOIN USING----
----Conn n1/n1----
----------------------
select e.last_name AS "사원" , d.department_name "부서명"
from employees e left join departments d
using (department_ID);


---ANSI JOIN 에서의 CROSS JOIN---
---Conn sctott/tiger---

select ename, dname
from emp cross join dept;             ---- JOIN 조건이 없어 모든 경우의 수, cross join 을 넣으면 의도적으로 모든 경우의 수 


-----------------------------------------------------------------------------
--Oracle JOIN   1. Equi JOIN (=Inner JOIN)
--                  2. Outer JOIN   (LEFT, RIGHT, FULL JOIN /  ORACLE 은 FULL 이 안되고 + 로 쓴다.)
--                  3. NON Equi JOIN
--                  4. SELF JOIN
--ANSI JOIN " , " 를 JOIN 으로 바꾸고 WHEN 을 " ON " 으로 바꾼다.
-----------------------------------------------------------------------------

----Conn scott/tiger----
--Threeways JOIN  ( 테이블을 3개 이상 JOIN 하는 것.)--
---여러개를 동시에 연결하는건 안좋은 습관이며 하나하나 연결하는 습관을 길러라---

--사원을 출력하고 어디 부서 소속인지와 받는 급여의 등급은 얼마인지
--ORACLE JOIN (Equi join)--

--1) 우선 emp , dept 먼저 2개 붙
select e.ename, d.dname
from emp e, dept d
where e.deptno = d.deptno(+);

--2) sal 이 붙어서 3개가 붙
select e.ename, d.dname, e.sal, s.grade
from emp e, dept d, salgrade s
where e.deptno = d.deptno(+)
and e.sal between s.losal and s.hisal;

---ANSI JOIN--
--1) 12명의 사원에대한 사원 전체 출력-- 
select e.ename, d.dname
from emp e left join dept d
on e.deptno = d.deptno;

--2)  1번까지가 하나의 집합으로 보고 추가 시키는 과정 
select e.ename, d.dname, e.sal, s.grade
from emp e left join dept d
on e.deptno = d.deptno
--- ANSI JOIN 은 ORACLE JOIN과 다르게 from 에 붙지 않고 하단에 join 과 on이 다시 붙는다
join salgrade s      --join
on e.sal between s.losal and s.hisal;     -- on 이 다시 붙음


----conn n1/n1-----
--employees.last_name as 사원명
-- ,departments.departmnet_name as 부서명
-- , job_grades.grade_level as 등급 으로 출력 하시오  (ORACLE, ANSI 각각)

----1) ORACLE JOIN
select e.last_name, d.department_name
from employees e, departments d
where e.department_id = d. department_id(+);

----2) 급여등급 추가
select e.last_name, d.department_name, e.salary, j.grade_level
from employees e, departments d, job_grades j
where e.department_id = d. department_id
and e.salary between j.lowest_sal and j.highest_sal;

----ANSI ORACLE-----
---1) employees 와 departments 결합
select e.last_name, d.department_name
from employees e join departments d
ON e.department_id = d.department_id;
--2) salary 추가
select e.last_name, d.department_name, e.salary, j.grade_level
from employees e join departments d
ON e.department_id = d.department_id
JOIN JOB_GRADES j
on e.salary between j.lowest_sal and j.highest_sal;
